{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red98\green98\blue98;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c45882\c45882\c45882;\cssrgb\c100000\c100000\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww17700\viewh14520\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
See the Assessment Guide for information on how to interpret this report.\
\
ASSESSMENT SUMMARY\
\
Compilation:  PASSED\
API:          PASSED\
\
Findbugs:     FAILED (1 warning)\
Checkstyle:   FAILED (20 warnings)\
\
Correctness:  34/42 tests passed\
Memory:       8/11 tests passed\
Timing:       0/17 tests passed\
\
Aggregate score: 65.84%\
[Compilation: 5%, API: 5%, Findbugs: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]\
\
ASSESSMENT DETAILS\
\
The following files were submitted:\
----------------------------------\
7.1K Jun 14 23:48 Board.java\
4.1K Jun 14 23:48 Solver.java\
\
\
********************************************************************************\
*  COMPILING                                                                    \
********************************************************************************\
\
\
% javac Board.java\
*-----------------------------------------------------------\
\
% javac Solver.java\
*-----------------------------------------------------------\
\
\
================================================================\
\
\
Checking the APIs of your programs.\
*-----------------------------------------------------------\
Board:\
\
Solver:\
\
================================================================\
\
\
********************************************************************************\
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       \
********************************************************************************\
\
\
% findbugs *.class\
*-----------------------------------------------------------\
M C SA_LOCAL_SELF_COMPARISON SA: Nonsensical comparison of 'equals' with itself. Are you sure this is what you intended?  At Board.java:[line 194]\
Warnings generated: 1\
\
================================================================\
\
\
% checkstyle *.java\
*-----------------------------------------------------------\
Board.java:2:8: Unused import statement for 'java.util.Arrays'. [UnusedImports]\
Board.java:4:8: Unused import statement for 'edu.princeton.cs.algs4.StdDraw'. [UnusedImports]\
Board.java:46:19: 'if' is not followed by whitespace. [WhitespaceAfter]\
Board.java:73:15: 'if' is not followed by whitespace. [WhitespaceAfter]\
Board.java:108:22: '\{' is not preceded with whitespace. [WhitespaceAround]\
Board.java:126:22: '\{' is not preceded with whitespace. [WhitespaceAround]\
Solver.java:5:8: Unused import statement for 'edu.princeton.cs.algs4.StdDraw'. [UnusedImports]\
Solver.java:8:1: Unnecessary import statement for 'java.lang.NullPointerException' because it is from the package 'java.lang'. [RedundantImport]\
Solver.java:16:23: '\{' is not preceded with whitespace. [WhitespaceAround]\
Solver.java:28:29: '\{' is not preceded with whitespace. [WhitespaceAround]\
Solver.java:37:33: '(' is followed by whitespace. [ParenPad]\
Solver.java:37:37: ',' is not followed by whitespace. [WhitespaceAfter]\
Solver.java:38:36: '(' is followed by whitespace. [ParenPad]\
Solver.java:38:40: ',' is not followed by whitespace. [WhitespaceAfter]\
Solver.java:59:21: '(' is followed by whitespace. [ParenPad]\
Solver.java:59:41: '!' is followed by whitespace. [NoWhitespaceAfter]\
Solver.java:65:21: '(' is followed by whitespace. [ParenPad]\
Solver.java:65:43: '!' is followed by whitespace. [NoWhitespaceAfter]\
Solver.java:83:14: 'while' is not followed by whitespace. [WhitespaceAfter]\
Solver.java:83:30: '\{' is not preceded with whitespace. [WhitespaceAround]\
Checkstyle ends with 20 errors.\
\
================================================================\
\
\
********************************************************************************\
*  TESTING CORRECTNESS\
********************************************************************************\
\
Testing correctness of Board\
*-----------------------------------------------------------\
Running 22 total tests.\
\
Tests 5, 6, 13, and 14 rely upon toString() returning results in prescribed format.\
\
Test 1a: Test hamming() with file inputs\
  * puzzle04.txt\
  * puzzle00.txt\
  * puzzle07.txt\
  * puzzle17.txt\
  * puzzle27.txt\
  * puzzle2x2-unsolvable1.txt\
==> passed\
\
Test 1b: Test hamming() with random n-by-n boards\
  * 2-by-2\
  * 3-by-3\
  * 4-by-4\
  * 5-by-5\
  * 9-by-9\
  * 10-by-10\
  * 127-by-127\
==> passed\
\
Test 2a: Test manhattan() with file inputs\
  * puzzle04.txt\
  * puzzle00.txt\
  * puzzle07.txt\
  * puzzle17.txt\
  * puzzle27.txt\
  * puzzle2x2-unsolvable1.txt\
==> passed\
\
Test 2b: Test manhattan() with random n-by-n boards\
  * 2-by-2\
  * 3-by-3\
  * 4-by-4\
  * 5-by-5\
  * 9-by-9\
  * 10-by-10\
  * 127-by-127\
==> passed\
\
Test 3: Test dimension() with random n-by-n boards\
  * 2-by-2\
  * 3-by-3\
  * 4-by-4\
  * 5-by-5\
==> passed\
\
Test 4a: Test toString() with file inputs\
  * puzzle04.txt\
  * puzzle00.txt\
  * puzzle06.txt\
  * puzzle09.txt\
  * puzzle23.txt\
  * puzzle2x2-unsolvable1.txt\
==> passed\
\
Test 4b: Test toString() with random n-by-n boards\
  * 2-by-2\
  * 3-by-3\
  * 4-by-4\
  * 5-by-5\
  * 9-by-9\
  * 10-by-10\
  * 127-by-127\
==> passed\
\
Test 5a: Test neighbors() with file inputs\
  * puzzle04.txt\
  * puzzle00.txt\
  * puzzle06.txt\
  * puzzle09.txt\
  * puzzle23.txt\
  * puzzle2x2-unsolvable1.txt\
==> passed\
\
Test 5b: Test neighbors() with random n-by-n boards\
  * 2-by-2\
  * 3-by-3\
  * 4-by-4\
  * 5-by-5\
  * 9-by-9\
  * 10-by-10\
  * 127-by-127\
==> passed\
\
Test 6a: Test neighbors() of neigbors() with file inputs\
  * puzzle04.txt\
  * puzzle00.txt\
  * puzzle06.txt\
  * puzzle09.txt\
  * puzzle23.txt\
  * puzzle2x2-unsolvable1.txt\
==> passed\
\
Test 6b: Test neighbors() of neighbors() with random n-by-n boards\
  * 2-by-2\
  * 3-by-3\
  * 4-by-4\
  * 5-by-5\
  * 9-by-9\
  * 10-by-10\
==> passed\
\
Test 7a: Test twin() with file inputs\
  * puzzle04.txt\
  * puzzle00.txt\
  * puzzle06.txt\
  * puzzle09.txt\
  * puzzle23.txt\
  * puzzle2x2-unsolvable1.txt\
==> passed\
\
Test 7b: Test twin() with random n-by-n boards\
  * 2-by-2\
  * 3-by-3\
  * 4-by-4\
  * 5-by-5\
  * 9-by-9\
  * 10-by-10\
==> passed\
\
Test 8a: Test isGoal() on file inputs\
  * puzzle00.txt\
  * puzzle04.txt\
  * puzzle16.txt\
  * puzzle06.txt\
  * puzzle09.txt\
  * puzzle23.txt\
  * puzzle2x2-unsolvable1.txt\
  * puzzle3x3-unsolvable1.txt\
  * puzzle3x3-00.txt\
  * puzzle4x4-00.txt\
==> passed\
\
Test 8b: Test isGoal() on n-by-n goal boards\
  * 2-by-2\
  * 3-by-3\
  * 4-by-4\
  * 5-by-5\
  * 6-by-6\
  * 100-by-100\
==> passed\
\
Test 9: Check whether two Board objects can be created at the same time\
  * random 3-by-3 and 3-by-3 boards\
  * random 4-by-4 and 4-by-4 boards\
  * random 2-by-2 and 2-by-2 boards\
  * random 3-by-3 and 4-by-4 boards\
  * random 4-by-4 and 3-by-3 boards\
==> passed\
\
Test 10a: Check equals()\
  * reflexive\
  * symmetric\
  * checks that individual entries of array are equal\
  * argument is object of type String\
  * argument is object of type Object\
  * argument is null\
  * argument is Board of different dimension\
==> passed\
\
Test 10b: Test equals() on m-by-m vs. n-by-n goal boards\
  * m = 2, n = 2\
    - failed on trial 4 of 100\
    - student   equals() = true\
    - reference equals() = false\
        2\
         3  1 \
         0  2 \
\
        2\
         3  0 \
         1  2 \
\
\
  * m = 3, n = 3\
    - failed on trial 248 of 1000\
    - student   equals() = true\
    - reference equals() = false\
        3\
         8  3  7 \
         0  6  1 \
         4  2  5 \
\
        3\
         4  6  8 \
         2  7  1 \
         5  0  3 \
\
\
  * m = 4, n = 4\
    - failed on trial 115 of 1000\
    - student   equals() = true\
    - reference equals() = false\
        4\
         9 14  5  2 \
         0 10 13  1 \
         3  7  6 15 \
         4  8 12 11 \
\
        4\
         2  0 15 13 \
         9  8  3  5 \
        12  4 14  1 \
         7 11 10  6 \
\
\
  * m = 2, n = 5\
  * m = 5, n = 2\
==> FAILED\
\
Test 11: Check that Board is immutable by changing argument array after\
         construction and making sure Board does not mutate\
==> passed\
\
Test 12: Check that Board is immutable by testing whether methods\
         return the same value, regardless of order in which called\
  * puzzle10.txt\
  * puzzle20.txt\
  * puzzle30.txt\
  * 2-by-2\
  * 3-by-3\
  * 4-by-4\
==> passed\
\
Test 13: Call hamming() on a board that is kth-neighbor of a board\
  * 0th neighbor of puzzle27.txt\
  * 1th neighbor of puzzle27.txt\
  * 2th neighbor of puzzle27.txt\
  * 13th neighbor of puzzle27.txt\
  * 13th neighbor of puzzle00.txt\
  * 13th neighbor of puzzle2x2-unsolvable1.txt\
==> passed\
\
Test 14: Call manhattan() on a board that is a kth-neighbor of a board\
  * 0th neighbor of puzzle27.txt\
  * 1th neighbor of puzzle27.txt\
  * 2th neighbor of puzzle27.txt\
  * 13th neighbor of puzzle27.txt\
  * 13th neighbor of puzzle00.txt\
  * 13th neighbor of puzzle2x2-unsolvable1.txt\
==> passed\
\
\
Total: 21/22 tests passed!\
\
\
================================================================\
********************************************************************************\
*  TESTING CORRECTNESS (substituting reference Board)\
********************************************************************************\
\
Testing correctness of Solver\
*-----------------------------------------------------------\
Running 20 total tests.\
\
Test 1: Call moves() with file inputs\
  * puzzle00.txt\
  * puzzle01.txt\
  * puzzle02.txt\
  * puzzle03.txt\
  * puzzle04.txt\
  * puzzle05.txt\
  * puzzle06.txt\
  * puzzle07.txt\
  * puzzle08.txt\
  * puzzle09.txt\
  * puzzle10.txt\
  * puzzle11.txt\
  * puzzle12.txt\
  * puzzle13.txt\
==> passed\
\
Test 2: Call solution() with file inputs\
  * puzzle00.txt\
  * puzzle01.txt\
  * puzzle02.txt\
  * puzzle03.txt\
  * puzzle04.txt\
  * puzzle05.txt\
  * puzzle06.txt\
  * puzzle07.txt\
  * puzzle08.txt\
  * puzzle10.txt\
  * puzzle15.txt\
==> passed\
\
Test 3: Create two Solver objects at the same time\
  * puzzle04.txt and puzzle04.txt\
  * puzzle00.txt and puzzle04.txt\
  * puzzle04.txt and puzzle00.txt\
==> passed\
\
Test 4a: Call isSolvable() with file inputs\
  * puzzle01.txt\
  * puzzle03.txt\
  * puzzle04.txt\
  * puzzle17.txt\
  * puzzle3x3-unsolvable1.txt\
  * puzzle3x3-unsolvable2.txt\
  * puzzle4x4-unsolvable.txt\
==> passed\
\
Test 4b: Call isSolvable() on random n-by-n boards\
  * 100 random 2-by-2 boards\
==> passed\
\
Test 5: Call moves() on unsolvable puzzles\
  * puzzle2x2-unsolvable1.txt\
    - moves() returns wrong value\
    - student   moves() = 0\
    - reference moves() = -1\
    - board =\
        2\
         1  0 \
         2  3 \
  * puzzle2x2-unsolvable2.txt\
    - moves() returns wrong value\
    - student   moves() = 0\
    - reference moves() = -1\
    - board =\
        2\
         0  1 \
         2  3 \
  * puzzle3x3-unsolvable1.txt\
    - moves() returns wrong value\
    - student   moves() = 0\
    - reference moves() = -1\
    - board =\
        3\
         1  2  3 \
         4  6  5 \
         7  8  0 \
  * puzzle3x3-unsolvable2.txt\
    - moves() returns wrong value\
    - student   moves() = 0\
    - reference moves() = -1\
    - board =\
        3\
         8  6  7 \
         2  5  4 \
         1  3  0 \
  * puzzle4x4-unsolvable.txt\
    - moves() returns wrong value\
    - student   moves() = 0\
    - reference moves() = -1\
    - board =\
        4\
         3  2  4  8 \
         1  6  0 12 \
         5 10  7 11 \
         9 13 14 15 \
==> FAILED\
\
Test 6: Call solution() on unsolvable puzzles\
  * puzzle2x2-unsolvable1.txt\
    java.lang.NullPointerException\
\
    Solver.solution(Solver.java:81)\
    TestSolver.testUnsolvableSolution(TestSolver.java:286)\
    TestSolver.test6(TestSolver.java:453)\
    TestSolver.main(TestSolver.java:988)\
\
  * puzzle2x2-unsolvable2.txt\
    java.lang.NullPointerException\
\
    Solver.solution(Solver.java:81)\
    TestSolver.testUnsolvableSolution(TestSolver.java:286)\
    TestSolver.test6(TestSolver.java:454)\
    TestSolver.main(TestSolver.java:988)\
\
  * puzzle3x3-unsolvable1.txt\
    java.lang.NullPointerException\
\
    Solver.solution(Solver.java:81)\
    TestSolver.testUnsolvableSolution(TestSolver.java:286)\
    TestSolver.test6(TestSolver.java:455)\
    TestSolver.main(TestSolver.java:988)\
\
  * puzzle3x3-unsolvable2.txt\
    java.lang.NullPointerException\
\
    Solver.solution(Solver.java:81)\
    TestSolver.testUnsolvableSolution(TestSolver.java:286)\
    TestSolver.test6(TestSolver.java:456)\
    TestSolver.main(TestSolver.java:988)\
\
  * puzzle4x4-unsolvable.txt\
    java.lang.NullPointerException\
\
    Solver.solution(Solver.java:81)\
    TestSolver.testUnsolvableSolution(TestSolver.java:286)\
    TestSolver.test6(TestSolver.java:457)\
    TestSolver.main(TestSolver.java:988)\
\
==> FAILED\
\
Test 7a: Check that Solver is immutable by testing whether methods\
         return the same value, regardless of order in which called\
  * puzzle3x3-00.txt\
  * puzzle3x3-01.txt\
  * puzzle3x3-05.txt\
  * puzzle3x3-10.txt\
  * random 2-by-2 solvable boards\
==> passed\
\
Test 7b: Check that Solver is immutable by testing whether methods\
         return the same value, regardless of order in which called\
  * puzzle3x3-unsolvable1.txt\
    java.lang.NullPointerException\
\
    Solver.solution(Solver.java:81)\
    TestSolver.testImmutableSolver(TestSolver.java:512)\
    TestSolver.testImmutableSolver(TestSolver.java:601)\
    TestSolver.test7b(TestSolver.java:621)\
    TestSolver.main(TestSolver.java:994)\
\
    - sequence of Solver operations was:\
          Solver solver = new Solver(initial);\
          solver.solution()\
  * puzzle3x3-unsolvable2.txt\
    java.lang.NullPointerException\
\
    Solver.solution(Solver.java:81)\
    TestSolver.testImmutableSolver(TestSolver.java:512)\
    TestSolver.testImmutableSolver(TestSolver.java:601)\
    TestSolver.test7b(TestSolver.java:622)\
    TestSolver.main(TestSolver.java:994)\
\
    - sequence of Solver operations was:\
          Solver solver = new Solver(initial);\
          solver.solution()\
  * puzzle4x4-unsolvable.txt\
    java.lang.NullPointerException\
\
    Solver.solution(Solver.java:81)\
    TestSolver.testImmutableSolver(TestSolver.java:512)\
    TestSolver.testImmutableSolver(TestSolver.java:601)\
    TestSolver.test7b(TestSolver.java:623)\
    TestSolver.main(TestSolver.java:994)\
\
    - sequence of Solver operations was:\
          Solver solver = new Solver(initial);\
          solver.moves() -> 0\
          solver.isSolvable() -> false\
          solver.moves() -> 0\
          solver.moves() -> 0\
          solver.isSolvable() -> false\
          solver.isSolvable() -> false\
          solver.solution()\
  * random 2-by-2 unsolvable boards\
    java.lang.NullPointerException\
\
    Solver.solution(Solver.java:81)\
    TestSolver.testImmutableSolver(TestSolver.java:512)\
    TestSolver.testImmutableSolverUnsolvableBoards(TestSolver.java:585)\
    TestSolver.test7b(TestSolver.java:624)\
    TestSolver.main(TestSolver.java:994)\
\
    - sequence of Solver operations was:\
          Solver solver = new Solver(initial);\
          solver.moves() -> 0\
          solver.moves() -> 0\
          solver.isSolvable() -> false\
          solver.moves() -> 0\
          solver.isSolvable() -> false\
          solver.moves() -> 0\
          solver.isSolvable() -> false\
          solver.solution()\
    - failed on trial 1 of 10\
\
==> FAILED\
\
Test 8: Call moves() with more file inputs\
  * puzzle14.txt\
  * puzzle15.txt\
  * puzzle16.txt\
  * puzzle17.txt\
  * puzzle18.txt\
    - moves() returns wrong value\
    - student   moves() = 20\
    - reference moves() = 18\
    - board =\
        3\
         5  6  2 \
         1  8  4 \
         7  3  0 \
  * puzzle19.txt\
    - moves() returns wrong value\
    - student   moves() = 21\
    - reference moves() = 19\
    - board =\
        3\
         1  2  7 \
         0  4  3 \
         6  5  8 \
  * puzzle20.txt\
  * puzzle21.txt\
  * puzzle22.txt\
    - moves() returns wrong value\
    - student   moves() = 24\
    - reference moves() = 22\
    - board =\
        3\
         4  8  2 \
         3  6  5 \
         1  7  0 \
  * puzzle23.txt\
  * puzzle24.txt\
    - moves() returns wrong value\
    - student   moves() = 26\
    - reference moves() = 24\
    - board =\
        3\
         5  7  4 \
         3  0  8 \
         1  6  2 \
  * puzzle25.txt\
  * puzzle26.txt\
    - moves() returns wrong value\
    - student   moves() = 28\
    - reference moves() = 26\
    - board =\
        3\
         5  7  0 \
         3  2  8 \
         1  6  4 \
  * puzzle27.txt\
  * puzzle28.txt\
  * puzzle29.txt\
  * puzzle30.txt\
  * puzzle31.txt\
==> FAILED\
\
Test 9: Check whether equals() method in Board is called\
        with an argument of the wrong type\
  * puzzle00.txt\
  * puzzle05.txt\
  * puzzle10.txt\
  * puzzle15.txt\
==> passed\
\
Test 10: Check that constructor throws exception if board is null\
==> passed\
\
Test 11: Check for fragile dependence on toString()\
  * puzzle00.txt\
  * puzzle04.txt\
  * puzzle08.txt\
  * puzzle12.txt\
==> passed\
\
Test 12a: Call moves() with 2-by-2 file inputs\
  * puzzle2x2-00.txt\
  * puzzle2x2-01.txt\
  * puzzle2x2-02.txt\
  * puzzle2x2-03.txt\
  * puzzle2x2-04.txt\
  * puzzle2x2-05.txt\
  * puzzle2x2-06.txt\
==> passed\
\
Test 12b: Call solution() with 2-by-2 file inputs\
  * puzzle2x2-00.txt\
  * puzzle2x2-01.txt\
  * puzzle2x2-02.txt\
  * puzzle2x2-03.txt\
  * puzzle2x2-04.txt\
  * puzzle2x2-05.txt\
  * puzzle2x2-06.txt\
==> passed\
\
Test 13a: Call moves() with 3-by-3 file inputs\
  * puzzle3x3-00.txt\
  * puzzle3x3-01.txt\
  * puzzle3x3-02.txt\
  * puzzle3x3-03.txt\
  * puzzle3x3-04.txt\
  * puzzle3x3-05.txt\
  * puzzle3x3-06.txt\
  * puzzle3x3-07.txt\
  * puzzle3x3-08.txt\
  * puzzle3x3-09.txt\
  * puzzle3x3-10.txt\
  * puzzle3x3-11.txt\
  * puzzle3x3-12.txt\
  * puzzle3x3-13.txt\
    - moves() returns wrong value\
    - student   moves() = 15\
    - reference moves() = 13\
    - board =\
        3\
         4  3  1 \
         0  7  2 \
         8  5  6 \
  * puzzle3x3-14.txt\
  * puzzle3x3-15.txt\
  * puzzle3x3-16.txt\
  * puzzle3x3-17.txt\
  * puzzle3x3-18.txt\
  * puzzle3x3-19.txt\
  * puzzle3x3-20.txt\
  * puzzle3x3-21.txt\
  * puzzle3x3-22.txt\
  * puzzle3x3-23.txt\
  * puzzle3x3-24.txt\
  * puzzle3x3-25.txt\
  * puzzle3x3-26.txt\
  * puzzle3x3-27.txt\
  * puzzle3x3-28.txt\
  * puzzle3x3-29.txt\
  * puzzle3x3-30.txt\
    - moves() returns wrong value\
    - student   moves() = 32\
    - reference moves() = 30\
    - board =\
        3\
         8  6  7 \
         2  0  4 \
         3  5  1 \
==> FAILED\
\
Test 13b: Call solution() with 3-by-3 file inputs\
  * puzzle3x3-00.txt\
  * puzzle3x3-01.txt\
  * puzzle3x3-02.txt\
  * puzzle3x3-03.txt\
  * puzzle3x3-04.txt\
  * puzzle3x3-05.txt\
  * puzzle3x3-06.txt\
  * puzzle3x3-07.txt\
  * puzzle3x3-08.txt\
  * puzzle3x3-09.txt\
  * puzzle3x3-10.txt\
  * puzzle3x3-11.txt\
  * puzzle3x3-12.txt\
  * puzzle3x3-13.txt\
  * puzzle3x3-14.txt\
  * puzzle3x3-15.txt\
  * puzzle3x3-16.txt\
  * puzzle3x3-17.txt\
  * puzzle3x3-18.txt\
  * puzzle3x3-19.txt\
  * puzzle3x3-20.txt\
  * puzzle3x3-21.txt\
  * puzzle3x3-22.txt\
  * puzzle3x3-23.txt\
  * puzzle3x3-24.txt\
  * puzzle3x3-25.txt\
  * puzzle3x3-26.txt\
  * puzzle3x3-27.txt\
  * puzzle3x3-28.txt\
  * puzzle3x3-29.txt\
  * puzzle3x3-30.txt\
==> passed\
\
Test 14a: Call moves() with 4-by-4 file inputs\
  * puzzle4x4-00.txt\
  * puzzle4x4-01.txt\
  * puzzle4x4-02.txt\
  * puzzle4x4-03.txt\
  * puzzle4x4-04.txt\
  * puzzle4x4-05.txt\
  * puzzle4x4-06.txt\
  * puzzle4x4-07.txt\
  * puzzle4x4-08.txt\
  * puzzle4x4-09.txt\
  * puzzle4x4-10.txt\
  * puzzle4x4-11.txt\
  * puzzle4x4-12.txt\
  * puzzle4x4-13.txt\
  * puzzle4x4-14.txt\
  * puzzle4x4-15.txt\
    - moves() returns wrong value\
    - student   moves() = 19\
    - reference moves() = 15\
    - board =\
        4\
         5  1  3  4 \
        13  2  7  8 \
         6 10 11 12 \
        14  9  0 15 \
  * puzzle4x4-16.txt\
    - moves() returns wrong value\
    - student   moves() = 20\
    - reference moves() = 16\
    - board =\
        4\
         5  1  2  4 \
         6  0 10  7 \
        13 11  3  8 \
        14  9 15 12 \
  * puzzle4x4-17.txt\
  * puzzle4x4-18.txt\
  * puzzle4x4-19.txt\
  * puzzle4x4-20.txt\
  * puzzle4x4-21.txt\
  * puzzle4x4-22.txt\
  * puzzle4x4-23.txt\
  * puzzle4x4-24.txt\
    - moves() returns wrong value\
    - student   moves() = 28\
    - reference moves() = 24\
    - board =\
        4\
         9  5  1  2 \
         6  4  8  3 \
        10 14  7 11 \
        13  0 15 12 \
  * puzzle4x4-25.txt\
  * puzzle4x4-26.txt\
  * puzzle4x4-27.txt\
  * puzzle4x4-28.txt\
  * puzzle4x4-29.txt\
    - moves() returns wrong value\
    - student   moves() = 33\
    - reference moves() = 29\
    - board =\
        4\
         1  8  3  0 \
         5  7  4 12 \
        14  6  2 15 \
         9 13 10 11 \
  * puzzle4x4-30.txt\
    - moves() returns wrong value\
    - student   moves() = 34\
    - reference moves() = 30\
    - board =\
        4\
         2  4  8 12 \
         1  7  3 14 \
         0  6 15 11 \
         5  9 13 10 \
==> FAILED\
\
Test 14b: Call solution() with 4-by-4 file inputs\
  * puzzle4x4-00.txt\
  * puzzle4x4-01.txt\
  * puzzle4x4-02.txt\
  * puzzle4x4-03.txt\
  * puzzle4x4-04.txt\
  * puzzle4x4-05.txt\
  * puzzle4x4-06.txt\
  * puzzle4x4-07.txt\
  * puzzle4x4-08.txt\
  * puzzle4x4-09.txt\
  * puzzle4x4-10.txt\
  * puzzle4x4-11.txt\
  * puzzle4x4-12.txt\
  * puzzle4x4-13.txt\
  * puzzle4x4-14.txt\
  * puzzle4x4-15.txt\
  * puzzle4x4-16.txt\
  * puzzle4x4-17.txt\
  * puzzle4x4-18.txt\
  * puzzle4x4-19.txt\
  * puzzle4x4-20.txt\
  * puzzle4x4-21.txt\
  * puzzle4x4-22.txt\
  * puzzle4x4-23.txt\
  * puzzle4x4-24.txt\
  * puzzle4x4-25.txt\
  * puzzle4x4-26.txt\
  * puzzle4x4-27.txt\
  * puzzle4x4-28.txt\
  * puzzle4x4-29.txt\
  * puzzle4x4-30.txt\
==> passed\
\
Test 15: Call moves() with random solvable n-by-n boards\
  * 100 random 2-by-2 boards\
  * 200 random 3-by-3 boards that are <= 20 moves from goal\
    - moves() returns wrong value\
    - student   moves() = 14\
    - reference moves() = 12\
    - board =\
        3\
         1  2  0 \
         4  7  3 \
         8  5  6 \
    - failed on trial 22 of 200\
\
  * 200 random 4-by-4 boards that are <= 20 moves from goal\
    - moves() returns wrong value\
    - student   moves() = 20\
    - reference moves() = 18\
    - board =\
        4\
         1  4 12  7 \
         5  2  3  8 \
         9  6  0 10 \
        13 14 11 15 \
    - failed on trial 2 of 200\
\
  * 200 random 5-by-5 boards that are <= 20 moves from goal\
    - moves() returns wrong value\
    - student   moves() = 23\
    - reference moves() = 19\
    - board =\
        5\
         1  2  3  9  4 \
        11  6 13  8  5 \
         7 12 14 19 10 \
        16 17 18 24 15 \
        21  0 22 23 20 \
    - failed on trial 3 of 200\
\
==> FAILED\
\
\
Total: 13/20 tests passed!\
\
\
================================================================\
********************************************************************************\
*  MEMORY\
********************************************************************************\
\
Computing memory of Board\
*-----------------------------------------------------------\
Running 8 total tests.\
\
Memory usage of an n-by-n board\
\
              n       student (bytes)    reference (bytes)\
----------------------------------------------------------\
=> passed     4           248                  240\
=> passed     8           568                  560\
=> passed    12          1016                 1008\
=> passed    16          1592                 1584\
=> passed    20          2296                 2288\
=> passed    36          6392                 6384\
=> passed    72         23096                23088\
=> passed   120         61496                61488\
==> 8/8 tests passed\
\
Total: 8/8 tests passed!\
\
Student   memory = 4.00 n^2 + 32.00 n + 56.00   (R^2 = 1.000)\
Reference memory = 4.00 n^2 + 32.00 n + 48.00   (R^2 = 1.000)\
\
================================================================\
\
\
\
Computing memory of Solver\
*-----------------------------------------------------------\
Running 3 total tests.\
\
Test 1: memory with puzzle20.txt (must be <= 2.0x reference solution)\
  - memory of student   Solver = 800872 bytes\
  - memory of reference Solver = 4896 bytes\
  - student / reference        = 163.58\
==> FAILED\
\
Test 2: memory with puzzle25.txt (must be <= 2.0x reference solution)\
  - memory of student   Solver = 127800 bytes\
  - memory of reference Solver = 6056 bytes\
  - student / reference        = 21.10\
==> FAILED\
\
Test 3: memory with puzzle30.txt (must be <= 2.0x reference solution)\
  - memory of student   Solver = 3094952 bytes\
  - memory of reference Solver = 7216 bytes\
  - student / reference        = 428.90\
==> FAILED\
\
\
Total: 0/3 tests passed!\
\
================================================================\
\
\
\
********************************************************************************\
*  TIMING                                                                  \
********************************************************************************\
\
Timing Solver\
*-----------------------------------------------------------\
Running 17 total tests.\
\
Timing tests use your implementation of Board.java and Solver.java.\
Maximum time allowed per puzzle is 10 seconds.\
\
               filename   N    seconds    insert()            delMin()         max PQ size\
---------------------------------------------------------------------------------------------\
=> passed  puzzle20.txt   3     0.11       3177                2142                1037         \
=> passed  puzzle21.txt   3     0.03       3380                2186                1196         \
=> passed  puzzle22.txt   3     0.10      10953                7222                3733         \
=> passed  puzzle23.txt   3     0.07       9116                5962                3156         \
=> passed  puzzle24.txt   3     0.03       3644                2424                1222         \
=> passed  puzzle25.txt   3     0.00        507                 360                 149         \
=> passed  puzzle26.txt   3     0.02       3337                2264                1075         \
=> passed  puzzle27.txt   3     0.05       6775                4602                2175         \
=> passed  puzzle28.txt   3     0.10      13380                9088                4294         \
Exception in thread "main" java.util.NoSuchElementException: Priority queue underflow\
	at edu.princeton.cs.algs4.MinPQ.delMin(MinPQ.java:173)\
	at Solver.<init>(Solver.java:42)\
	at TimeSolver.main(TimeSolver.java:134)\
\
\
Total: 0/17 tests passed: Could not complete tests, which results in a reported score of 0.\
================================================================}