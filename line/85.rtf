{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red98\green98\blue98;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c45882\c45882\c45882;\cssrgb\c100000\c100000\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww22380\viewh15360\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
See the Assessment Guide for information on how to interpret this report.\
\
ASSESSMENT SUMMARY\
\
Compilation:  PASSED\
API:          PASSED\
\
Findbugs:     FAILED (6 warnings)\
Checkstyle:   FAILED (43 warnings)\
\
Correctness:  34/41 tests passed\
Memory:       1/1 tests passed\
Timing:       31/41 tests passed\
\
Aggregate score: 84.88%\
[Compilation: 5%, API: 5%, Findbugs: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]\
\
ASSESSMENT DETAILS\
\
The following files were submitted:\
----------------------------------\
3.3K Jun 12 09:09 BruteCollinearPoints.java\
4.5K Jun 12 09:09 FastCollinearPoints.java\
5.7K Jun 12 09:09 Point.java\
\
\
********************************************************************************\
*  COMPILING                                                                    \
********************************************************************************\
\
\
% javac Point.java\
*-----------------------------------------------------------\
\
% javac BruteCollinearPoints.java\
*-----------------------------------------------------------\
\
% javac FastCollinearPoints.java\
*-----------------------------------------------------------\
\
\
================================================================\
\
\
Checking the APIs of your programs.\
*-----------------------------------------------------------\
Point:\
\
BruteCollinearPoints:\
\
FastCollinearPoints:\
\
================================================================\
\
\
********************************************************************************\
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       \
********************************************************************************\
\
\
% findbugs *.class\
*-----------------------------------------------------------\
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At Point.java:[line 128]\
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At BruteCollinearPoints.java:[line 11]\
L P UPM_UNCALLED_PRIVATE_METHOD UPM: The private method 'isCollinear()' is never called.  At FastCollinearPoints.java:[line 15]\
M D DLS_DEAD_LOCAL_STORE DLS: Assigns a value to the local variable 'temp' but that value is never used.  At FastCollinearPoints.java:[line 79]\
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At FastCollinearPoints.java:[line 15]\
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At FastCollinearPoints.java:[line 46]\
Warnings generated: 6\
\
================================================================\
\
\
% checkstyle *.java\
*-----------------------------------------------------------\
Point.java:65:11: 'if' is not followed by whitespace. [WhitespaceAfter]\
Point.java:66:11: 'if' is not followed by whitespace. [WhitespaceAfter]\
Point.java:67:11: 'if' is not followed by whitespace. [WhitespaceAfter]\
Point.java:68:17: '(' is followed by whitespace. [ParenPad]\
Point.java:85:11: 'if' is not followed by whitespace. [WhitespaceAfter]\
Point.java:85:12: '(' is followed by whitespace. [ParenPad]\
Point.java:85:30: '\{' is not preceded with whitespace. [WhitespaceAround]\
Point.java:86:15: 'if' is not followed by whitespace. [WhitespaceAfter]\
Point.java:87:15: 'if' is not followed by whitespace. [WhitespaceAfter]\
Point.java:87:33: '\{' is not preceded with whitespace. [WhitespaceAround]\
Point.java:87:34: 'return' is not preceded with whitespace. [WhitespaceAround]\
Point.java:87:34: '\{' is not followed by whitespace. [WhitespaceAround]\
Point.java:90:11: 'if' is not followed by whitespace. [WhitespaceAfter]\
Point.java:90:40: ';' is not followed by whitespace. [WhitespaceAfter]\
Point.java:90:40: '\}' is not preceded with whitespace. [WhitespaceAround]\
Point.java:109:20: 'if' is not followed by whitespace. [WhitespaceAfter]\
Point.java:110:20: 'if' is not followed by whitespace. [WhitespaceAfter]\
Point.java:111:20: 'if' is not followed by whitespace. [WhitespaceAfter]\
Point.java:112:26: '(' is followed by whitespace. [ParenPad]\
Point.java:126:3: The comment is empty. [IllegalTokenText]\
Point.java:127:17: '(' is followed by whitespace. [ParenPad]\
Point.java:128:17: '(' is followed by whitespace. [ParenPad]\
Point.java:159:45: ',' is not followed by whitespace. [WhitespaceAfter]\
Point.java:160:49: ',' is not followed by whitespace. [WhitespaceAfter]\
Point.java:166:42: ')' is preceded with whitespace. [ParenPad]\
Point.java:167:24: '(' is followed by whitespace. [ParenPad]\
BruteCollinearPoints.java:10:68: '\{' is not preceded with whitespace. [WhitespaceAround]\
BruteCollinearPoints.java:11:17: '(' is followed by whitespace. [ParenPad]\
BruteCollinearPoints.java:11:78: ')' is preceded with whitespace. [ParenPad]\
BruteCollinearPoints.java:13:68: '\{' is not preceded with whitespace. [WhitespaceAround]\
BruteCollinearPoints.java:14:13: '(' is followed by whitespace. [ParenPad]\
BruteCollinearPoints.java:21:41: ')' is preceded with whitespace. [ParenPad]\
BruteCollinearPoints.java:26:50: ',' is not followed by whitespace. [WhitespaceAfter]\
BruteCollinearPoints.java:29:26: '\{' is not preceded with whitespace. [WhitespaceAround]\
BruteCollinearPoints.java:31:12: 'for' is not followed by whitespace. [WhitespaceAfter]\
BruteCollinearPoints.java:31:39: '\{' is not preceded with whitespace. [WhitespaceAround]\
BruteCollinearPoints.java:37:5: Define constructors after static and instance variables but before methods. [DeclarationOrder]\
BruteCollinearPoints.java:43:43: ')' is preceded with whitespace. [ParenPad]\
BruteCollinearPoints.java:50:27: 'if' is not followed by whitespace. [WhitespaceAfter]\
...\
 Checkstyle ends with 43 errors.\
\
================================================================\
\
\
********************************************************************************\
*  TESTING CORRECTNESS\
********************************************************************************\
\
Testing correctness of Point\
*-----------------------------------------------------------\
Running 3 total tests.\
\
Test 1: p.slopeTo(q)\
  * positive infinite slope, where p and q have coordinates in [0, 500)\
  * positive infinite slope, where p and q have coordinates in [0, 32768)\
  * negative infinite slope, where p and q have coordinates in [0, 500)\
  * negative infinite slope, where p and q have coordinates in [0, 32768)\
  * positive zero     slope, where p and q have coordinates in [0, 500)\
  * positive zero     slope, where p and q have coordinates in [0, 32768)\
  * symmetric for random points p and q with coordinates in [0, 500)\
  * symmetric for random points p and q with coordinates in [0, 32768)\
  * transitive for random points p, q, and r with coordinates in [0, 500)\
  * transitive for random points p, q, and r with coordinates in [0, 32768)\
  * slopeTo(), where p and q have coordinates in [0, 500)\
  * slopeTo(), where p and q have coordinates in [0, 32768)\
  * slopeTo(), where p and q have coordinates in [0, 10)\
  * throw a java.lang.NullPointerException if argument is null\
==> passed\
\
Test 2: p.compareTo(q)\
  * reflexive, where p and q have coordinates in [0, 500)\
  * reflexive, where p and q have coordinates in [0, 32768)\
  * antisymmetric, where p and q have coordinates in [0, 500)\
  * antisymmetric, where p and q have coordinates in [0, 32768)\
  * transitive, where p, q, and r have coordinates in [0, 500)\
  * transitive, where p, q, and r have coordinates in [0, 32768)\
  * sign of compareTo(), where p and q have coordinates in [0, 500)\
  * sign of compareTo(), where p and q have coordinates in [0, 32768)\
  * sign of compareTo(), where p and q have coordinates in [0, 10)\
  * throw java.lang.NullPointerException exception if argument is null\
==> passed\
\
Test 3: p.slopeOrder().compare(q, r)\
  * reflexive, where p and q have coordinates in [0, 500)\
  * reflexive, where p and q have coordinates in [0, 32768)\
  * antisymmetric, where p, q, and r have coordinates in [0, 500)\
  * antisymmetric, where p, q, and r have coordinates in [0, 32768)\
  * transitive, where p, q, r, and s have coordinates in [0, 500)\
  * transitive, where p, q, r, and s have coordinates in [0, 32768)\
  * sign of compare(), where p, q, and r have coordinates in [0, 500)\
  * sign of compare(), where p, q, and r have coordinates in [0, 32768)\
  * sign of compare(), where p, q, and r have coordinates in [0, 10)\
  * throw java.lang.NullPointerException if either argument is null\
==> passed\
\
\
Total: 3/3 tests passed!\
\
\
================================================================\
********************************************************************************\
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)\
********************************************************************************\
\
Testing correctness of BruteCollinearPoints\
*-----------------------------------------------------------\
Running 17 total tests.\
\
The inputs satisfy the following conditions:\
  - no duplicate points\
  - no 5 (or more) points are collinear\
  - all x- and y-coordinates between 0 and 32,767\
\
Test 1: Points from a file\
  * filename = input8.txt\
  * filename = equidistant.txt\
  * filename = input40.txt\
  * filename = input48.txt\
==> passed\
\
Test 2a: Points from a file with horizontal line segments\
  * filename = horizontal5.txt\
  * filename = horizontal25.txt\
==> passed\
\
Test 2b: Random horizontal line segments\
  *  1 random horizontal line segment\
  *  5 random horizontal line segments\
  * 10 random horizontal line segments\
  * 15 random horizontal line segments\
==> passed\
\
Test 3a: Points from a file with vertical line segments\
  * filename = vertical5.txt\
  * filename = vertical25.txt\
==> passed\
\
Test 3b: Random vertical line segments\
  *  1 random vertical line segment\
  *  5 random vertical line segments\
  * 10 random vertical line segments\
  * 15 random vertical line segments\
==> passed\
\
Test 4a: Points from a file with no line segments\
  * filename = random23.txt\
  * filename = random38.txt\
==> passed\
\
Test 4b: Random points with no line segments\
  *  5 random points\
  * 10 random points\
  * 20 random points\
  * 50 random points\
==> passed\
\
Test 5: Points from a file with fewer than 4 points\
  * filename = input1.txt\
  * filename = input2.txt\
  * filename = input3.txt\
==> passed\
\
Test 6: Check for dependence on either compareTo() or compare()\
        returning \{ -1, +1, 0 \} instead of \{ negative integer,\
        positive integer, zero \}\
  * filename = equidistant.txt\
  * filename = input40.txt\
  * filename = input48.txt\
==> passed\
\
Test 7: Check for fragile dependence on return value of toString()\
  * filename = equidistant.txt\
  * filename = input40.txt\
  * filename = input48.txt\
==> passed\
\
Test 8: Random line segments, none vertical or horizontal\
  *  1 random line segment\
  *  5 random line segments\
  * 10 random line segments\
  * 15 random line segments\
==> passed\
\
Test 9: Random line segments\
  *  1 random line segment\
  *  5 random line segments\
  * 10 random line segments\
  * 15 random line segments\
==> passed\
\
Test 10: Check that data type is immutable by testing whether each method\
        returns the same value, regardless of any intervening operations\
  * input8.txt\
  * equidistant.txt\
==> passed\
\
Test 11: Check that data type does not mutate the constructor argument\
  * input8.txt\
  * equidistant.txt\
==> passed\
\
Test 12: numberOfSegments() is consistent with segments()\
  * filename = input8.txt\
  * filename = equidistant.txt\
  * filename = input40.txt\
  * filename = input48.txt\
  * filename = horizontal5.txt\
  * filename = vertical5.txt\
  * filename = random23.txt\
==> passed\
\
Test 13: Throws exception either if argument to constructor is null\
         or if any entry in array is null\
  * argument is null\
  * Point[] of length 10, number of null entries = 1\
  * Point[] of length 10, number of null entries = 10\
  * Point[] of length 4, number of null entries = 1\
  * Point[] of length 3, number of null entries = 1\
  * Point[] of length 2, number of null entries = 1\
  * Point[] of length 1, number of null entries = 1\
==> passed\
\
Test 14: Check that the constructor throws an exception if duplicate points\
  * 50 points\
    - failed on trial 1 of 5\
    - does not throw a java.lang.IllegalArgumentException\
\
  * 25 points\
    - failed on trial 1 of 10\
    - does not throw a java.lang.IllegalArgumentException\
\
  * 5 points\
    - failed on trial 1 of 100\
    - does not throw a java.lang.IllegalArgumentException\
     5\
     12388  1933\
     32532 14301\
     28451  6762\
     32532 14301\
      6784 21095\
\
  * 4 points\
    - failed on trial 1 of 100\
    - does not throw a java.lang.IllegalArgumentException\
     4\
     26468 17326\
      5397 18547\
     19756 16817\
      5397 18547\
\
  * 3 points\
    - failed on trial 1 of 100\
    - does not throw a java.lang.IllegalArgumentException\
     3\
     25508 16928\
     25508 16928\
     28812  9947\
\
  * 2 points\
    - failed on trial 1 of 100\
    - does not throw a java.lang.IllegalArgumentException\
     2\
     22308 31925\
     22308 31925\
\
==> FAILED\
\
\
Total: 16/17 tests passed!\
\
\
================================================================\
Testing correctness of FastCollinearPoints\
*-----------------------------------------------------------\
Running 21 total tests.\
\
The inputs satisfy the following conditions:\
  - no duplicate points\
  - all x- and y-coordinates between 0 and 32,767\
\
Test 1: Points from a file\
  * filename = input8.txt\
  * filename = equidistant.txt\
  * filename = input40.txt\
  * filename = input48.txt\
  * filename = input299.txt\
==> passed\
\
Test 2a: Points from a file with horizontal line segments\
  * filename = horizontal5.txt\
  * filename = horizontal25.txt\
  * filename = horizontal50.txt\
  * filename = horizontal75.txt\
  * filename = horizontal100.txt\
==> passed\
\
Test 2b: Random horizontal line segments\
  *  1 random horizontal line segment\
  *  5 random horizontal line segments\
  * 10 random horizontal line segments\
  * 15 random horizontal line segments\
==> passed\
\
Test 3a: Points from a file with vertical line segments\
  * filename = vertical5.txt\
  * filename = vertical25.txt\
  * filename = vertical50.txt\
  * filename = vertical75.txt\
  * filename = vertical100.txt\
==> passed\
\
Test 3b: Random vertical line segments\
  *  1 random vertical line segment\
  *  5 random vertical line segments\
  * 10 random vertical line segments\
  * 15 random vertical line segments\
==> passed\
\
Test 4a: Points from a file with no line segments\
  * filename = random23.txt\
  * filename = random38.txt\
  * filename = random91.txt\
  * filename = random152.txt\
==> passed\
\
Test 4b: Random points with no line segments\
  *  5 random points\
  * 10 random points\
  * 20 random points\
  * 50 random points\
==> passed\
\
Test 5a: Points from a file with 5 or more on some line segments\
  * filename = input9.txt\
    - segments() contains a subsegment of a segment in reference solution\
    - student   segment 1: (1000, 1000) -> (8000, 8000)\
    - reference segment 0: (1000, 1000) -> (2000, 2000) -> (3000, 3000) -> (4000, 4000) -> (5000, 5000) -> (6000, 6000) -> (7000, 7000) -> (8000, 8000) -> (9000, 9000)\
\
    - student   solution has 6 non-null entries\
    - reference solution has 1 non-null entries\
    - 5 extra entries in student solution, including: (1000, 1000) -> (8000, 8000)\
\
\
  * filename = input10.txt\
    - segments() contains a subsegment of a segment in reference solution\
    - student   segment 2: (1000, 18000) -> (3500, 28000)\
    - reference segment 1: (1000, 18000) -> (2000, 22000) -> (3000, 26000) -> (3500, 28000) -> (4000, 30000)\
\
    - student   solution has 3 non-null entries\
    - reference solution has 2 non-null entries\
    - 1 extra entry in student solution: (1000, 18000) -> (3500, 28000)\
\
\
  * filename = input20.txt\
    - segments() contains a subsegment of a segment in reference solution\
    - student   segment 2: (5120, 20992) -> (8128, 20992)\
    - reference segment 0: (4096, 20992) -> (5120, 20992) -> (6144, 20992) -> (7168, 20992) -> (8128, 20992)\
\
    - student   solution has 9 non-null entries\
    - reference solution has 5 non-null entries\
    - 4 extra entries in student solution, including: (5120, 29184) -> (8192, 29184)\
\
\
  * filename = input50.txt\
    - segments() contains a subsegment of a segment in reference solution\
    - student   segment 3: (18000, 13000) -> (18000, 27000)\
    - reference segment 6: (18000, 13000) -> (18000, 23000) -> (18000, 26000) -> (18000, 27000) -> (18000, 30000)\
\
    - student   solution has 9 non-null entries\
    - reference solution has 7 non-null entries\
    - 2 extra entries in student solution, including: (18000, 13000) -> (18000, 27000)\
\
\
  * filename = input80.txt\
    - segments() contains the same segment more than once\
    - segment 34: (17000, 5000) -> (1000, 21000)\
    - segment 36: (17000, 5000) -> (1000, 21000)\
\
    - segments() contains a subsegment of a segment in reference solution\
    - student   segment 11: (28000, 14000) -> (13000, 29000)\
    - reference segment 3: (30000, 12000) -> (28000, 14000) -> (26000, 16000) -> (23000, 19000) -> (13000, 29000)\
\
    - student   solution has 41 non-null entries\
    - reference solution has 31 non-null entries\
    - 10 extra entries in student solution, including: (0, 23000) -> (26000, 23000)\
\
\
  * filename = input300.txt\
    - segments() contains a subsegment of a segment in reference solution\
    - student   segment 5: (7300, 10050) -> (7300, 25700)\
    - reference segment 5: (7300, 10050) -> (7300, 10450) -> (7300, 17000) -> (7300, 25700) -> (7300, 31650)\
\
    - student   solution has 7 non-null entries\
    - reference solution has 6 non-null entries\
    - 1 extra entry in student solution: (7300, 10050) -> (7300, 25700)\
\
\
  * filename = inarow.txt\
    - segments() contains the same segment more than once\
    - segment 0: (0, 0) -> (30000, 0)\
    - segment 7: (0, 0) -> (30000, 0)\
\
    - segments() contains a subsegment of a segment in reference solution\
    - student   segment 4: (0, 0) -> (0, 25000)\
    - reference segment 4: (0, 0) -> (0, 5000) -> (0, 10000) -> (0, 11000) -> (0, 15000) -> (0, 20000) -> (0, 25000) -> (0, 30000)\
\
    - student   solution has 15 non-null entries\
    - reference solution has 5 non-null entries\
    - 10 extra entries in student solution, including: (10000, 3100) -> (25000, 12400)\
\
\
==> FAILED\
\
Test 5b: Points from a file with 5 or more on some line segments\
  * filename = kw1260.txt\
    - segments() contains the same segment more than once\
    - segment 15: (16954, 13503) -> (16318, 13643)\
    - segment 22: (16954, 13503) -> (16318, 13643)\
\
    - segments() contains a subsegment of a segment in reference solution\
    - student   segment 9: (16389, 19629) -> (16389, 19734)\
    - reference segment 275: (16389, 19629) -> (16389, 19664) -> (16389, 19699) -> (16389, 19734) -> (16389, 19769)\
\
    - student   solution has 645 non-null entries\
    - reference solution has 288 non-null entries\
    - 357 extra entries in student solution, including: (12652, 30395) -> (14236, 30449)\
\
\
  * filename = rs1423.txt\
==> FAILED\
\
Test 6: Points from a file with fewer than 4 points\
  * filename = input1.txt\
  * filename = input2.txt\
  * filename = input3.txt\
==> passed\
\
Test 7: Check for dependence on either compareTo() or compare()\
        returning \{ -1, +1, 0 \} instead of \{ negative integer,\
        positive integer, zero \}\
  * filename = equidistant.txt\
  * filename = input40.txt\
  * filename = input48.txt\
  * filename = input299.txt\
==> passed\
\
Test 8: Check for fragile dependence on return value of toString()\
  * filename = equidistant.txt\
  * filename = input40.txt\
  * filename = input48.txt\
==> passed\
\
Test 9: Random line segments, none vertical or horizontal\
  *  1 random line segment\
  *  5 random line segments\
  * 25 random line segments\
  * 50 random line segments\
  * 100 random line segments\
==> passed\
\
Test 10: Random line segments\
  *  1 random line segment\
  *  5 random line segments\
  * 25 random line segments\
  * 50 random line segments\
  * 100 random line segments\
==> passed\
\
Test 11: Random distinct points in a given range\
  * 5 random points in a 10-by-10 grid\
  * 10 random points in a 10-by-10 grid\
    - segments() contains the same segment more than once\
    - segment 0: (7, 0) -> (7, 9)\
    - segment 1: (7, 0) -> (7, 9)\
\
    - student   solution has 2 non-null entries\
    - reference solution has 1 non-null entries\
    - 1 extra entry in student solution: (7, 0) -> (7, 9)\
\
\
    - failed on trial 1 of 500\
     10\
         7     7\
         7     6\
         7     9\
         1     1\
         2     7\
         1     0\
         3     4\
         7     5\
         1     8\
         7     0\
\
  * 50 random points in a 10-by-10 grid\
    - segments() contains the same segment more than once\
    - segment 11: (9, 4) -> (4, 9)\
    - segment 18: (9, 4) -> (4, 9)\
\
    - segments() contains a subsegment of a segment in reference solution\
    - student   segment 23: (6, 2) -> (1, 7)\
    - reference segment 7: (8, 0) -> (6, 2) -> (4, 4) -> (2, 6) -> (1, 7)\
\
    - student   solution has 77 non-null entries\
    - reference solution has 44 non-null entries\
    - 33 extra entries in student solution, including: (0, 9) -> (9, 9)\
\
\
    - failed on trial 1 of 100\
\
  * 90 random points in a 10-by-10 grid\
    - segments() contains the same segment more than once\
    - segment 7: (4, 0) -> (4, 9)\
    - segment 23: (4, 0) -> (4, 9)\
\
    - segments() contains a subsegment of a segment in reference solution\
    - student   segment 31: (5, 2) -> (5, 9)\
    - reference segment 125: (5, 0) -> (5, 2) -> (5, 4) -> (5, 5) -> (5, 6) -> (5, 7) -> (5, 8) -> (5, 9)\
\
    - student   solution has 317 non-null entries\
    - reference solution has 130 non-null entries\
    - 187 extra entries in student solution, including: (0, 9) -> (9, 9)\
\
\
    - failed on trial 1 of 50\
\
  * 200 random points in a 50-by-50 grid\
    - segments() contains the same segment more than once\
    - segment 3: (33, 1) -> (33, 45)\
    - segment 22: (33, 1) -> (33, 45)\
\
    - segments() contains a subsegment of a segment in reference solution\
    - student   segment 16: (35, 3) -> (35, 40)\
    - reference segment 197: (35, 1) -> (35, 3) -> (35, 9) -> (35, 21) -> (35, 23) -> (35, 40)\
\
    - student   solution has 337 non-null entries\
    - reference solution has 206 non-null entries\
    - 131 extra entries in student solution, including: (8, 48) -> (49, 48)\
\
\
    - failed on trial 1 of 10\
\
==> FAILED\
\
Test 12: M*N points on an M-by-N grid\
  * 3-by-3 grid\
  * 4-by-4 grid\
  * 5-by-5 grid\
    - segments() contains the same segment more than once\
    - segment 2: (1, 0) -> (1, 4)\
    - segment 7: (1, 0) -> (1, 4)\
\
    - segments() contains a subsegment of a segment in reference solution\
    - student   segment 11: (2, 1) -> (2, 4)\
    - reference segment 13: (2, 0) -> (2, 1) -> (2, 2) -> (2, 3) -> (2, 4)\
\
    - student   solution has 28 non-null entries\
    - reference solution has 16 non-null entries\
    - 12 extra entries in student solution, including: (0, 4) -> (4, 4)\
\
\
  * 10-by-10 grid\
    - segments() contains the same segment more than once\
    - segment 9: (9, 0) -> (9, 9)\
    - segment 25: (9, 0) -> (9, 9)\
\
    - segments() contains a subsegment of a segment in reference solution\
    - student   segment 30: (8, 0) -> (8, 8)\
    - reference segment 152: (8, 0) -> (8, 1) -> (8, 2) -> (8, 3) -> (8, 4) -> (8, 5) -> (8, 6) -> (8, 7) -> (8, 8) -> (8, 9)\
\
    - student   solution has 394 non-null entries\
    - reference solution has 154 non-null entries\
    - 240 extra entries in student solution, including: (0, 9) -> (9, 9)\
\
\
  * 20-by-20 grid\
    - segments() contains the same segment more than once\
    - segment 37: (10, 0) -> (10, 19)\
    - segment 93: (10, 0) -> (10, 19)\
\
    - segments() contains a subsegment of a segment in reference solution\
    - student   segment 124: (9, 0) -> (9, 18)\
    - reference segment 2435: (9, 0) -> (9, 1) -> (9, 2) -> (9, 3) -> (9, 4) -> (9, 5) -> (9, 6) -> (9, 7) -> (9, 8) -> (9, 9) -> (9, 10) -> (9, 11) -> (9, 12) -> (9, 13) -> (9, 14) -> (9, 15) -> (9, 16) -> (9, 17) -> (9, 18) -> (9, 19)\
\
    - student   solution has 5646 non-null entries\
    - reference solution has 2446 non-null entries\
    - 3200 extra entries in student solution, including: (0, 19) -> (19, 19)\
\
\
  * 5-by-4 grid\
    - segments() contains the same segment more than once\
    - segment 6: (0, 3) -> (4, 3)\
    - segment 9: (0, 3) -> (4, 3)\
\
    - segments() contains a subsegment of a segment in reference solution\
    - student   segment 12: (0, 0) -> (3, 0)\
    - reference segment 2: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0)\
\
    - student   solution has 17 non-null entries\
    - reference solution has 13 non-null entries\
    - 4 extra entries in student solution, including: (0, 3) -> (4, 3)\
\
\
  * 6-by-4 grid\
    - segments() contains the same segment more than once\
    - segment 2: (0, 0) -> (5, 0)\
    - segment 9: (0, 0) -> (5, 0)\
\
    - segments() contains a subsegment of a segment in reference solution\
    - student   segment 7: (1, 1) -> (5, 1)\
    - reference segment 4: (0, 1) -> (1, 1) -> (2, 1) -> (3, 1) -> (4, 1) -> (5, 1)\
\
    - student   solution has 24 non-null entries\
    - reference solution has 16 non-null entries\
    - 8 extra entries in student solution, including: (2, 3) -> (5, 3)\
\
\
  * 10-by-4 grid\
    - segments() contains the same segment more than once\
    - segment 6: (0, 0) -> (9, 0)\
    - segment 17: (0, 0) -> (9, 0)\
\
    - segments() contains a subsegment of a segment in reference solution\
    - student   segment 59: (3, 2) -> (9, 2)\
    - reference segment 14: (0, 2) -> (1, 2) -> (2, 2) -> (3, 2) -> (4, 2) -> (5, 2) -> (6, 2) -> (7, 2) -> (8, 2) -> (9, 2)\
\
    - student   solution has 62 non-null entries\
    - reference solution has 38 non-null entries\
    - 24 extra entries in student solution, including: (0, 3) -> (9, 3)\
\
\
  * 15-by-4 grid\
    - segments() contains the same segment more than once\
    - segment 12: (0, 3) -> (14, 3)\
    - segment 28: (0, 3) -> (14, 3)\
\
    - segments() contains a subsegment of a segment in reference solution\
    - student   segment 75: (6, 3) -> (14, 3)\
    - reference segment 33: (0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3) -> (5, 3) -> (6, 3) -> (7, 3) -> (8, 3) -> (9, 3) -> (10, 3) -> (11, 3) -> (12, 3) -> (13, 3) -> (14, 3)\
\
    - student   solution has 123 non-null entries\
    - reference solution has 79 non-null entries\
    - 44 extra entries in student solution, including: (11, 3) -> (14, 3)\
\
\
  * 25-by-4 grid\
    - segments() contains the same segment more than once\
    - segment 17: (0, 3) -> (24, 3)\
    - segment 46: (0, 3) -> (24, 3)\
\
    - segments() contains a subsegment of a segment in reference solution\
    - student   segment 190: (11, 3) -> (24, 3)\
    - reference segment 95: (0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3) -> (5, 3) -> (6, 3) -> (7, 3) -> (8, 3) -> (9, 3) -> (10, 3) -> (11, 3) -> (12, 3) -> (13, 3) -> (14, 3) -> (15, 3) -> (16, 3) -> (17, 3) -> (18, 3) -> (19, 3) -> (20, 3) -> (21, 3) -> (22, 3) -> (23, 3) -> (24, 3)\
\
    - student   solution has 297 non-null entries\
    - reference solution has 213 non-null entries\
    - 84 extra entries in student solution, including: (21, 3) -> (24, 3)\
\
\
==> FAILED\
\
Test 13: Check that data type is immutable by testing whether each method\
         returns the same value, regardless of any intervening operations\
  * input8.txt\
  * equidistant.txt\
==> passed\
\
Test 14: Check that data type does not mutate the constructor argument\
  * input8.txt\
    - data type mutated the points[] array\
    - data type should have no side effects unless documented in API\
  * equidistant.txt\
    - data type mutated the points[] array\
    - data type should have no side effects unless documented in API\
==> FAILED\
\
Test 15: numberOfSegments() is consistent with segments()\
  * filename = input8.txt\
  * filename = equidistant.txt\
  * filename = input40.txt\
  * filename = input48.txt\
  * filename = horizontal5.txt\
  * filename = vertical5.txt\
  * filename = random23.txt\
==> passed\
\
Test 16: Throws exception either if argument to constructor is null\
         or if any entry in array is null\
  * argument is null\
  * Point[] of length 10, number of null entries = 1\
  * Point[] of length 10, number of null entries = 10\
  * Point[] of length 4, number of null entries = 1\
  * Point[] of length 3, number of null entries = 1\
  * Point[] of length 2, number of null entries = 1\
  * Point[] of length 1, number of null entries = 1\
==> passed\
\
Test 17: Check that the constructor throws an exception if duplicate points\
  * 50 points\
    - failed on trial 1 of 5\
    - does not throw a java.lang.IllegalArgumentException\
\
  * 25 points\
    - failed on trial 1 of 10\
    - does not throw a java.lang.IllegalArgumentException\
\
  * 5 points\
    - failed on trial 1 of 100\
    - does not throw a java.lang.IllegalArgumentException\
     5\
      3414  2518\
     29051 14919\
      3414  2518\
      8574  8631\
     20322 32583\
\
  * 4 points\
    - failed on trial 1 of 100\
    - does not throw a java.lang.IllegalArgumentException\
     4\
     22995 19296\
      8988 26173\
     28445  1396\
      8988 26173\
\
  * 3 points\
    - failed on trial 1 of 100\
    - does not throw a java.lang.IllegalArgumentException\
     3\
      5891 22907\
      5891 22907\
     27818   431\
\
  * 2 points\
    - failed on trial 1 of 100\
    - does not throw a java.lang.IllegalArgumentException\
     2\
     23122 24720\
     23122 24720\
\
==> FAILED\
\
\
Total: 15/21 tests passed!\
\
\
================================================================\
********************************************************************************\
*  MEMORY\
*****\
\
...\
\
WARNING: the grading output was truncated due to excessive length.\
Typically, this is because you have a method that has an unanticipated side effect\
(such as printing to standard output or throwing an exception). A large amount of output\
can also arise from failing many tests.}